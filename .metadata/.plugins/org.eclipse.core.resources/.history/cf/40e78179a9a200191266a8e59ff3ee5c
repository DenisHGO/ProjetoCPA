package application;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Orientation;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

public class FMXLInicialController implements Initializable {

	@FXML
	public Button idmusicas;

	@FXML
	private ListView<String> idlistamusicas;

	ObservableList listMusicas = FXCollections.observableArrayList();	
		
	String helper = System.getProperty("user.dir");

	@FXML
	private VBox idletramusicas;

	//@FXML
	//private ScrollPane idletramusicas;

	ArrayList filesNames = new ArrayList();
	ArrayList<String> textoMusicas = new ArrayList();
		

	public void acaoBotaoMusicas(ActionEvent event) {

		File arquivo = new File(helper+"/src/musicas");
				
		File[] files = arquivo.listFiles();
		filesNames.clear();		

		// pegando todos nomes das musicas
		for (int i = 0; i < files.length; i++) {
			File arquivos = files[i];
			filesNames.add(arquivos.getName());
		}

		listMusicas.removeAll(listMusicas);
		listMusicas = FXCollections.<String> observableArrayList(filesNames);

		// seasons.setItems(listMusicas);
		idlistamusicas.setOrientation(Orientation.VERTICAL);
		idlistamusicas.setItems(listMusicas);

	}

	public void acaoExibirMusicas(ActionEvent event) throws IOException {

		String musicaSelecionada = "";
		if (!(idlistamusicas.getSelectionModel().getSelectedItem() == null)){
			musicaSelecionada = idlistamusicas.getSelectionModel().getSelectedItem();	
		}else{
			Alert dialogoErro = new Alert(Alert.AlertType.ERROR);
			 dialogoErro.setTitle("Error");
	            dialogoErro.setHeaderText("OPS..");
	            dialogoErro.setContentText("Necessario escolher uma musica para ser exibida!");
	            dialogoErro.showAndWait();
		}				
		
		BufferedReader buffRead = new BufferedReader(new FileReader(helper+"/src/musicas/"+musicaSelecionada));
		String linha = "";
		//idletramusicas -- clear
		ArrayList<Node> textoMusicasTemp = new ArrayList<>();
		ArrayList<Pane> pai = new ArrayList<>();
		TextArea txLogin = new TextArea();
		String stringFull = ""; 
		
		while (true) {
			if (linha != null) {
				// list.add(linha);
				linha = buffRead.readLine();
				Text text1 = new Text(linha);
				textoMusicas.add(linha);
			} else
				break;
			
		
		/*while (true) {
			if (linha != null) {
				// list.add(linha);
				// System.out.println(linha);
			} else
				break;
			linha = buffRead.readLine();
			Text text1 = new Text(linha);
			textoMusicas.add(linha);			        
		}	*/
		
		/*Rectangle retanguloAzul = new Rectangle(80, 20);
		Rectangle retanguloVerde = new Rectangle(40, 20);
		Rectangle retanguloVermelho = new Rectangle(150, 20);*/
		
		for (String line: textoMusicas)				
			if(line != null && line.isEmpty()){
				
				txLogin.setText(stringFull);
				txLogin.setPrefWidth(699);
								
				Pane content = new Pane();				
				content.getChildren().setAll(txLogin);
				
				adicionarEstrofe(content);
				
				//idletramusicas.setContent(content);
				textoMusicasTemp.add(content);
				//teste2.addAll(content);
								
				stringFull = "";
				
				
			}else if (!stringFull.isEmpty() && line != null){				
				stringFull = stringFull+"\n"+line;							
			}else{
				stringFull = line;
			}				
		
		buffRead.close();
	}
	
	public void adicionarEstrofe(Pane e){
		idletramusicas.getChildren().add(e);
	}
	
	public String buscarArquivo(){	
		
		
		return null;	
	}

	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub

	}

}
